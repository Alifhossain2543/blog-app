Install docker desktop. //done
Install Kubernetes. // done
Install ingress-nginx. // Done
Install Skaffold. // Done
Install postgress// Done

//USE TS EVERYWHERE****
create auth backend // Done
create docker file // Done
create ingress infra/k8s and put a ingress file and apply it. // Done
check if the ingress is working // Done
create skaffold file and docker images // Done
check if the skaffold is working //Done
Connect azure postgress// Done
Write prisma model for users// Done
check auth-route by malfunctioning the cookie //Done
Add redis to the auth service//
*******MOVE TO THE ENDPOINT******

----endpoints----
create user, Set a session to it.//Done
Login User, Set a session to it.//Done
update user //Done
write test and run all of them.//Done
Create a npm package with the common files//Done
Install the package and replace with others//Done



*****Client side******
Create dockerfile// Done
Create depl & service//Done
add to ingress// Done
Add to skaffold//Done
Run on pods//Done
Work on user authenticaion.//Done
try react-query//Done
store user data and token to redux store//Done
initialize redux-toolkit//Done
store all user data to redux-store//Done
check the server side rendaring if it's render everytime or not on change page or url.// Done
use cypress for testing//Done

//

********************Post Servicee**********************
create post service//Done
use different database//Done
create prisma model for posts//Done
link it with user: {fullName , userId, email, profilePic}// Done
create CRUD operations// Done
test all //
create bull and bull dashboard//
use service worker to optimize and save the blob data// USE BULL PACKAGE //worker_threads
add imagedata to check bull//
create kafka//
create and use Redis-depl //
 ------ > >> >>>> work on event bus
********************* event bus *************************
initialize kafka node//
add in common files and publish npm//
integrate with post and auth//

<<<<<<<<<<<<<<<<<<---------------TEST ALL---------------->>>>>>>>>>>>>>

******************client side of Post*******************
create post interface//
use service worker to optimize and save the blob data//
integrate all post services apis//
test it//


************Authentication and Authorization*********
Need to create a short lived storage to store the banned user.


*******Backend important feature******
use a worker to perform high computing work (image processing, video processing) on other core.//

*******Frontend important feature******
use a service worker to perform high computing work (image processing, video processing) on other core.//
connect websockets //



//